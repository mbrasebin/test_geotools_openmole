val fileIn = Val[File]
val seed = Val[Long]
val fileOut = Val[File]

val rangeSeed = (42L to 42L) // (42L to 1042L)

val exploStab = ExplorationTask(seed in rangeSeed)

val GeoTifReaderTask = ScalaTask(
  """
  |import fr.openmole.geotools.tiff._
  |withThreadClassLoader(TiffReaderTask.getClassLoader())(TiffReaderTask.readGeoTiff(fileIn))""".stripMargin
  ) set (
  libraries += workDirectory / "test-mupcity-openmole-0.0.1-SNAPSHOT-shaded.jar",
  fileIn :=  workDirectory / "data" / "test.tif",
  inputs += (fileIn),
  outputs += (fileIn)
)

val GeoTifWriter = ScalaTask(
  """
  |import fr.openmole.geotools.tiff._
  |withThreadClassLoader(TiffReaderTask.getClassLoader())(TiffWriterTask.write(fileIn, fileOut))""".stripMargin
  ) set (
  libraries += workDirectory / "test-mupcity-openmole-0.0.1-SNAPSHOT-shaded.jar",
  fileIn :=  workDirectory / "data" / "test.tif",
  fileOut :=  workDirectory / "data" / "out.tif",
  inputs += (fileIn, fileOut),
  outputs += (fileIn, fileOut)
)

val GeoTifReaderWriter = ScalaTask("""
| fr.openmole.geotools.tiff.TiffReaderTask.readGeoTiff(fileIn)
| fr.openmole.geotools.tiff.TiffWriterTask.write(fileIn, fileOut)""".stripMargin) set (
  libraries += workDirectory / "test-mupcity-openmole-0.0.1-SNAPSHOT-shaded.jar",
  fileIn :=  workDirectory / "data" / "test.tif",
  fileOut :=  workDirectory / "data" / "out.tif",
  inputs += (fileIn, fileOut),
  outputs += (fileIn, fileOut)
)

val env = LocalEnvironment(1)

//GeoTifReaderTask on env
(GeoTifReaderTask  on env) -- (GeoTifWriter on env)

//(GeoTifReaderWriter on env)

